name: 'GoChat CI/CD'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Run tests with Make
      run: make test
      
  build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '24'

    - name: Build with Make
      run: make build
      env:
        CI: false # temporarily false to allow frontend build with warnings

    - name:  Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v5.0.0
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-Packer
        aws-region: us-east-1
      
    - name: Setup `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: "latest"

    - name: Run `packer init`
      id: init
      run: "packer init packer/gochat.pkr.hcl"

    - name: Run `packer validate`
      id: validate
      run: "packer validate packer/gochat.pkr.hcl"
      env:
        PKR_VAR_domain_name: ${{ vars.DOMAIN_NAME }}

    - name: Run `packer build`
      id: build
      run: "packer build -color=false -on-error=abort packer/gochat.pkr.hcl"
      env:
        PKR_VAR_domain_name: ${{ vars.DOMAIN_NAME }}

  terraform:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Terraform
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name:  Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v5.0.0
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-Terraform
        aws-region: us-east-1
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest

    - name: Terraform Init
      run: terraform -chdir=terraform init

    - name: Terraform Format
      run: terraform -chdir=terraform fmt -check

    - name: Terraform Plan
      run: terraform -chdir=terraform plan -input=false -out=tfplan
      env:
        TF_VAR_signing_key: ${{ secrets.SIGNING_KEY }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_acm_certificate_domain: ${{ secrets.ACM_CERTIFICATE_DOMAIN }}
        TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform -chdir=terraform apply -auto-approve -input=false tfplan

    - name: Instance Refresh
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        ASG_NAME=$(terraform output -raw asg_name)
        aws autoscaling start-instance-refresh --auto-scaling-group-name "$ASG_NAME" --preferences '{"MinHealthyPercentage":90,"InstanceWarmup":300}'
